1. Kernel configuration
=======================

KGDB is still an experimental feature. This means that in order to enable it,
CONFIG_EXPERIMENTAL needs to be set ("Prompt for development and/or incomplete
code/drivers"). When this option is enabled the option "KGDB: kernel debugger"
will appear in the "Kernel hacking" menu.

You will also need a medium for the remote GDB protocol. Depending on the
hardware available you can use Ethernet or a UART. In this application note
we will show how to use KGDB over a serial console, so please enable that
option as well.

Your kernel configuration needs to have the following options set:

	CONFIG_EXPERIMENTAL
	CONFIG_KGDB
	CONFIG_KGDB_SERIAL_CONSOLE


Kernel command line
~~~~~~~~~~~~~~~~~~~

On the kernel command line you need to tell KGDB which serial port to use using
the "kgdboc" option. If you have more serial ports to your disposal, you can
pick a different one than the console; if you have only one you need to use the
same serial port for both console and KGDB.

Example:

	1 serial port: "console=ttyS0,115200n8 kgdboc=ttyS0,115200"

	2 serial ports: "console=ttyS0,115200n8 kgdboc=ttyS1,115200"


These examples assume you want to attach gdb to the kernel at a later stage.
Alternatively, you could add the "kgdbwait" option to the command line. With
"kgdbwait" on the command line, the kernel will wait for a debugger to attach
at boot time.


2. Connect from GDB
===================


Stop the kernel
~~~~~~~~~~~~~~~

To connect to your target via serial, you will need to have a development PC
with UART that runs GDB and a terminal program. First, you will need to stop
the kernel on the target using a SysRq trigger. For this you need to send a
'remote break' command using your terminal program, followed by a the character
'g'.

Example using minicom: Ctrl-a, f, g
Example using Tera Term: Alt-b, g

Please note that you will also need to stop the kernel if you have two UARTs,
even though one of the two UARTs is dedicated to KGDB.


Connect GDB
~~~~~~~~~~~

After having stopped the kernel, it is time to connect GDB:

	$ arc-elf32-gdb vmlinux
	(gdb) set remotebaud 115200
	(gdb) target remote /dev/ttyUSB0

Now you can use GDB as usual. For instance, you could set a breakpoint now
using 'b <identifier>' and then continue kernel execution again using 'c'.
