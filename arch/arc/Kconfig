#
# Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#

config ARC
	bool
	default y
	select HAVE_OPROFILE
	select NO_IOPORT
	select HAVE_KPROBES
	select HAVE_KRETPROBES
	select HAVE_PERF_EVENTS
	select PERF_USE_VMALLOC
	select GENERIC_ATOMIC64

# vineetg: Mar 31st 2010
# hack: to enable oprofile w/o TRACE_IRQFLAGS
# Normally this is selected automatically by kbuild system
# But is dependent on IRQTRACING when don't have yet.
# So for now we fake it: When IRQTRACING implemented, take it off
	select TRACING_SUPPORT

config RWSEM_GENERIC_SPINLOCK
	def_bool y

config UID16
	bool
	default y

config SPLIT_PTLOCK_CPUS
	int
	default 4096

config FLATMEM
	bool
	default y

config LOG_BUF_SHIFT
	int
	default 14

config MMU
	bool
	default y

config NO_IOPORT
	bool
	default y

config GENERIC_CALIBRATE_DELAY
	bool
	default y

config GENERIC_TIME
	bool
	default y

config GENERIC_FIND_FIRST_BIT
	bool
	default y

config GENERIC_FIND_NEXT_BIT
	bool
	default y

config GENERIC_HWEIGHT
	bool
	default y

config BINFMT_ELF
	bool
	default y

config STACKTRACE_SUPPORT
	def_bool y
	select STACKTRACE

config SCHED_OMIT_FRAME_POINTER
	bool
	default y

config HAVE_LATENCYTOP_SUPPORT
	bool
	default y

config NO_DMA
	bool
	default n

config GENERIC_CLOCKEVENTS
	bool
	default y

source "init/Kconfig"
source "kernel/Kconfig.freezer"

menu "ARC Architecture Configuration"

menu "ARC CPU Configuration"

choice
	prompt "ARC Core"
	default ARC_CPU_770

config ARC_CPU_750D
	bool "ARC750D"
	help
	  Support for ARC750 core

config ARC_CPU_770
	bool "ARC770"
	select ARC_CPU_REL_4_10
	help
	  Support for ARC770 core introduced with Rel 4.10 (Summer 2011)
	  This core has a bunch of cool new features:
	  -MMU-v3: Variable Page Sz (4k, 8k, 16k), bigger J-TLB (128x4)
                   Shared Address Spaces (for sharing TLB entires in MMU)
	  -Caches: New Prog Model, Region Flush
	  -Insns: endian swap, load-locked/store-conditional, time-stamp-ctr

endchoice

config ARC_HAS_SMP_EXTN_MODEL
	bool "ARC750 SMP Extensions (ISS Models only)"
	depends on ARC_CPU_750D
	default n
	help
	  SMP Extensions to ARC750D, in a "simulation only" Model, supported in
	  ARC ISS (Instruction Set Simulator).
	  The SMP extensions include:
	  -IDU (Interrupt Distribution Unit)
	  -XTL (To enable CPU start/stop/set-PC for another CPU)
	  It doesn't provide Cross-core Cache coherency or Atomic Ops
	  Note that LLOCK/SCOND (in 770) are not cross-core safe (in ISS)
	  hence this is "750" only

config SMP
	bool "Symmetric Multi-Processing (Incomplete)"
	default y
	depends on ARC_HAS_SMP_EXTN_MODEL
	help
	  This enables support for systems with more than one CPU. If you have
	  a system with only one CPU, like most personal computers, say N. If
	  you have a system with more than one CPU, say Y.

config NR_CPUS
	int "Maximum number of CPUs (2-32)"
	range 2 32
	depends on SMP
	default "2"

menuconfig ARC_CACHE
	bool "Enable Cache Support"
	default y

if ARC_CACHE

config ARC_CACHE_LINE_SHIFT
	int "Cache Line Length (as power of 2)"
	range 5 7
	default "6"
	help
	  Starting with ARC700 4.9, Cache line length is configurable,
	  This option specifies "N", with Line-len = 2 power N
	  So line lengths of 32, 64, 128 are specified by 5,6,7, respectively
	  Linux only supports same line lengths for I and D caches.

config ARC_HAS_ICACHE
	bool "Use Instruction Cache"
	default y

config ARC_HAS_DCACHE
	bool "Use Data Cache"
	default y

config ARC_CACHE_PAGES
	bool "Per Page Cache Control"
	default y
	depends on ARC_HAS_ICACHE || ARC_HAS_DCACHE
	help
	  This can be used to over-ride the global I/D Cache Enable on a
	  per-page basis (but only for pages accessed via MMU such as
	  Kernel Virtual address or User Virtual Address)
	  TLB entries have a per-page Cache Enable Bit.
	  Note that Global I/D ENABLE + Per Page DISABLE works but corollary
	  Global DISABLE + Per Page ENABLE won't work

endif	#ARC_CACHE

config ARC_HAS_ICCM
	bool "Use ICCM"
	help
	  Single Cycle RAMS to store Fast Path Code
	default n

config ARC_HAS_DCCM
	bool "Use DCCM"
	help
	  Single Cycle RAMS to store Fast Path Data
	default n

config ARC_HAS_HW_MPY
	bool "Use Hardware Multiplier (Normal or Faster XMAC)"
	default y
	help
	  Influences how gcc generates code for MPY operations.
	  If enabled, MPYxx insns are generated, provided by Standard/XMAC
	  Multipler. Otherwise software multipy lib is used

choice
	prompt "ARC700 MMU Version"
	default ARC_MMU_V3 if ARC_CPU_770
	default ARC_MMU_V2 if ARC_CPU_750D

config ARC_MMU_V1
	bool "MMU v1"
	help
	  Orig ARC700 MMU

config ARC_MMU_V2
	bool "MMU v2"
	help
	  Fixed the deficiency of v1 - possible thrashing in memcpy sceanrio
	  when 2 D-TLB and 1 I-TLB entries index into same 2way set.

config ARC_MMU_V3
	bool "MMU v3"
	depends on ARC_CPU_770
	help
	  Introduced with ARC700 4.10: New Features
	  Variable Page size (1k-16k), var JTLB size 128 x (2 or 4)
	  Shared Address Spaces (SASID)

endchoice


config ARC_MMU_SASID
	bool "shared TLB entries for library code segments"
	default y
	depends on ARC_MMU_V3
	select ARC_CMN_MMAP
	help
	  Enable MMU support for code TLB entries, sharable across processes.
	  So instead of a per-process TLB entry per page of library code, a
	  single TLB entry is used across all proceeses, mapping this lib.
	  This is difft from glabal TLB entries as it is subscription based
	  This will reduce pressure on TLB immensely.

choice
	prompt "MMU Page Size"
	default ARC_PAGE_SIZE_8K

config ARC_PAGE_SIZE_8K
	bool "8KB"
	help
	  Choose between 8k vs 16k

config ARC_PAGE_SIZE_16K
	bool "16KB"
	depends on ARC_MMU_V3

config ARC_PAGE_SIZE_4K
	bool "4KB"
	depends on ARC_MMU_V3

endchoice

config ARC_COMPACT_IRQ_LEVELS
	bool "Enable two levels of Interrupts high(2)low(1)"
	default n

config ARC_IRQ3_LV2
	bool

config ARC_IRQ5_LV2
	bool

config ARC_IRQ6_LV2
	bool

config ARC_FPU_SAVE_RESTORE
	bool "Enable FPU state persistence across context switch"
	default N
	help
	  Double Precision Floating Point unit had dedictaed regs which
	  need to be saved/restored across context-switch.
	  Note that ARC FPU is overly simplistic, unlike say x86, which has
	  hardware pieces to allow software to conditionally save/restore,
	  based on actual usage of FPU by a task. Thus our implemn does
	  this for all tasks in system.

menuconfig ARC_CPU_REL_4_10
	bool "Enable support for Rel 4.10 features"
	default n
	help
	  -ARC770 (and dependent features) enabled
	  -ARC750 also shares some of the new features with 770

config ARC_HAS_LLSC
	bool "Insn: LLOCK/SCOND (efficient atomic ops)"
	default y
	depends on ARC_CPU_770

config ARC_HAS_SWAPE
	bool "Insn: SWAPE (endian-swap)"
	default y
	depends on ARC_CPU_REL_4_10

config ARC_HAS_RTSC
	bool "Insn: RTSC (64-bit r/o cycle counter)"
	default y
	depends on ARC_CPU_REL_4_10

endmenu   # "ARC CPU Configuration"

menu "Platform Board Configuration"

source "arch/arc/plat-arcfpga/Kconfig"

config ARC_PLAT_CLK
	int "Clock speed"
	default "12000000"

config LINUX_LINK_BASE
	hex "Linux Link Address"
	default "0x80000000"
	help
	  ARC700 divides the 32 bit phy address space into two equal halves
	  -Lower 2G (0 - 0x7FFF_FFFF ) is user virtual, translated by MMU
	  -Upper 2G (0x8000_0000 onwards) is untranslated, for kernel
	  Typically Linux kernel is linked at the start of untransalted addr,
	  hence the default value of 0x8zs.
	  However some customers have peripherals mapped at this addr, so
	  Linux needs to be scooted a bit.
	  If you don't know what the above means, leave this setting alone.

config ARC_PLAT_SDRAM_SIZE
	hex "SD RAM Size"
	default "0x10000000"
	help
	  Implies the amount of SDRAM/DRAM Linux is going to claim/own.
	  The actual memory itself could be larger than this number. But for
	  all software purposes, this is the amt of memory.

endmenu # "Platform Board Configuration"


config ARC_CURR_IN_REG
	bool "Dedicate Register r25 for current_task pointer"
	default N
	help
	  This reserved Register R25 to point to Current Task in
	  kernel mode. This saves memory access for each such access

config ARC_TLS_REG_EMUL
	bool "Emulate a TLS register using a dedicated user vaddr"
	default N
	help
	  ARC ABI lacks defining a dedicated TLS register to hold
	  pointer to TLS Data area.
	  So we emulate the TLS register using a TLS Virtual addr

config ARC_MISALIGN_ACCESS
	bool "Emulate unaligned memory access (userspace only)"
	default N
	help
	  This enables misaligned 16 & 32 bit memory access from user space.
	  Use ONLY-IF-ABS-NECESSARY as it will be very slow and also can hide
	  potential bugs in code

config ARC_ADDR_SPACE_RND
	bool "Address Space Randomisation (mmap/SP)"
	default N
	help
	  This feature enables Address space randomisation for mmap and SP
	  Note that it could lead to some performance degradation especially
	  for shared libraries so use it only if needed

config ARC_CMN_MMAP
	bool "mmap shared lib code at same vaddr across processes"
	default y
	select GENERIC_ALLOCATOR
	help
	  This feature forces kernel to map a particular shared lib's code
	  at same vaddr across processes using a dedicated
	  common-mmap-virtual-address-space. Any lib's code page frames
	  are already shared using page-cache; same vaddr ensures a single
	  v:p mapping, preventing virtual aliases in ARC VIPT I-Caches.
	  This boosts performance because each alias occupies a cache-line
	  of own hence needs to be fetched per instance as opposed to just
	  once.
	  It is _must_ for enabling hardware SASID feature, where a single
	  shared TLB entry for shared code can be used across processes.

config HZ
	int "Timer Frequency"
	default 100

config ARC_STACK_NONEXEC
	bool "Make stack non-executable"
	default n
	help
	  To disable the execute permissions of stack/heap of processes
	  which are enabled by default.

source "kernel/time/Kconfig"

config ARC_METAWARE_HLINK
	bool "Support for Metaware debugger assisted Host access"
	default n
	help
	  This options allows a Linux userland apps to directly access
	  host file system (open/creat/read/write etc) with help from
	  Metaware Debugger. This can come in handy for Linux-host communication
	  when there is no real usable peripheral such as EMAC.

menuconfig ARC_DBG
	bool "ARC debugging"
	default y

config ARC_DW2_UNWIND
	bool "Enable DWARF specific kernel stack unwind"
	depends on ARC_DBG
	default y
	select KALLSYMS
	help
	  Compiles the kernel with DWARF unwind information and can be used
	  to get stack backtraces.

	  If you say Y here the resulting kernel image will be slightly larger
	  but not slower, and it will give very useful debugging information.
	  If you don't debug the kernel, you can say N, but we may not be able
	  to solve problems without frame unwind information

config ARC_DBG_TLB_PARANOIA
	bool "Paranoia Checks in Low Level TLB Handlers"
	depends on ARC_DBG
	default n

config ARC_DBG_EVENT_TIMELINE
	bool "Low level event capture"
	depends on ARC_DBG
	default n
	help
	  Capture low level events: IRQ/Trap/Exception

config ARC_DBG_TLB_MISS_COUNT
	bool "Profile TLB Misses"
	default n
	select DEBUG_FS
	depends on ARC_DBG
	help
	  Counts number of I and D TLB Misses and exports them via Debugfs
	  The counters can be cleared via Debugfs as well

config ARC_UBOOT_CMDLINE
	bool "Support U-boot kernel command line passing"
	default n
	help
	  If you are using U-boot (www.denx.de) and wish to pass the kernel
	  command line from the U-boot environment to the Linux kernel then
	  switch this option on.
	  U-boot will pass the command_line variable at the beginning of the
	  .bss section.  The kernel copies this variable into the correct place
	  during it's boot.

source "kernel/Kconfig.preempt"

endmenu	 # "ARC Architecture Configuration"

source "mm/Kconfig"
source "net/Kconfig"
source "drivers/Kconfig"
source "fs/Kconfig"
source "arch/arc/Kconfig.debug"
source "security/Kconfig"
source "crypto/Kconfig"
source "lib/Kconfig"
